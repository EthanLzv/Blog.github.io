<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C_01_The first program</title>
    <url>/posts/34540.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="30e3105564675e1510a125d01bfdcd3cb77e395e9948ede996ed70c58b9919e3"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C教程</category>
      </categories>
      <tags>
        <tag>C教程</tag>
      </tags>
  </entry>
  <entry>
    <title>C_00_前言</title>
    <url>/posts/34539.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="fee7007a20641879d785f42e03ef5b1d1d0e07a47233b9dd58de8e154a8fa6db">634b0115877a916074538e821c23059070a3b77aaa6c4daa5cf74d3ca930ac54565b89f0337efca97adc31aea286fd4a62a2acab2f6491cc29450639d1b8c2b21989a8260a54e16ca03f9e1bff9eca61b09da888abb240bc4b7d3dc92f04c010722688abe5d849d0009ac65d50f615bca6dfe1ce6e7b707333afa9d551d2958157f5179d464dc14282c7ec3f2730eede3ad4ed44d44804d2ee96651d461d32d52dc05d653af041f38e111420b06e902f013d6d8d6d28282205a2f07421bd0aeaa37601f3ef0f12f29888c2a6922d754622337ee30024321bb4503250c601e7fde2eda63cb1cc6e2c034454422e41b328bc2e546d76153f8be9b60febc38963b0e35509b277f9dffa57b453fbdd7c92cc1b7d8d05166cf9828df4027428c95605ecbe02541885cf18e1eda40e85a60110708e3a832ad676f989ec7ad724747f0e14fcdbb16c95853c018a887446dd42f804791eb89f349bbb51bad9ab5d0aa8cceaab9af3d24e488a05a10cfa9d5ba82c353e435e1864c332a35c60c81acbe837f2471c94fb5389b8499a609f809138ff8ca1de48c32682bd23873a82b34a1dd67874e54c79a587aab33dcc4e4167b536bc7946a9e2e362862133ffa6a60b64af</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C教程</category>
      </categories>
      <tags>
        <tag>C教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用说明</title>
    <url>/posts/33206.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><div class="note default"><p>网络中有着很多很不错的MD写作教程，在这里我不重复书写，只简单记录最基本常用的语法。 <span class="label info">文章末尾</span>会给出详细的MD语法链接。</p></div><a id="more"></a><p><font color="gray" size="1"><p align="right"><a href="#jump">文章末尾</a></p></font></p><h2 id="Markdown（0）简介"><a href="#Markdown（0）简介" class="headerlink" title="Markdown（0）简介"></a>Markdown（0）简介</h2><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是什么？</h4><ul><li>是一种轻量级<code>标记</code>语言，允许人们使用纯文本格式编写文档</li><li>编写的文档可以导出HTML、Word、PDF等多种格式的文档</li><li>markdown编写的文档后缀为<code>.md</code>,<code>.markdown</code></li></ul><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><ul><li>Sublime Text</li><li>推荐使用插件：<code>Mrakdown Editing</code>、<code>Markdown Preview</code>、<code>LiveReload</code></li></ul><h2 id="Markdown（1）标题"><a href="#Markdown（1）标题" class="headerlink" title="Markdown（1）标题"></a>Markdown（1）标题</h2><h4 id="使用-和"><a href="#使用-和" class="headerlink" title="使用 = 和 -"></a>使用 <code>=</code> 和 <code>-</code></h4><ul><li>语法格式如下：<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">www.ilzv.me 一级标题</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">www.ilzv.me 二级标题</span><br><span class="line">-------------------</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用 #"></a>使用 <code>#</code></h4><ul><li>使用<code>#</code>号可以表示1-6级标题，一级标题对应一个<code>#</code>号，二级标题对应两个<code>#</code>号，以此类推。<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></li></ul><h2 id="Markdown（2）段落"><a href="#Markdown（2）段落" class="headerlink" title="Markdown（2）段落"></a>Markdown（2）段落</h2><ul><li>Markdown中可以直接编辑文字，段落换行可以使用<code>空行</code><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> 段落<span class="number">1</span></span><br><span class="line">（空一行）</span><br><span class="line"> 段落<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li>字体种类：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">***粗斜体文本**</span>*</span><br><span class="line"><span class="strong">___粗斜体文本__</span>_</span><br></pre></td></tr></table></figure></li></ul><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><ul><li>使用三个或以上的<code>*</code>、<code>-</code>、<code>_</code>建立分割线<blockquote><ol><li>行内不能有除三个符号以外的东西</li><li>符号之间可以插入空格</li><li>格式如下：</li></ol></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">*</span> <span class="string">*</span> <span class="string">*</span> </span><br><span class="line"><span class="string">******</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="bullet">-</span></span><br><span class="line"><span class="string">------</span></span><br><span class="line"><span class="string">___</span></span><br><span class="line"><span class="string">_</span> <span class="string">_</span> <span class="string">_</span></span><br><span class="line"><span class="string">______</span></span><br></pre></td></tr></table></figure><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><ul><li>若段落中的文字需要添加删除线，只需在文字两端添加两个波浪线<code>~</code>，格式如下：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">www</span><span class="selector-class">.ilzv</span><span class="selector-class">.me</span></span><br><span class="line">~~<span class="selector-tag">www</span><span class="selector-class">.ilzv</span><span class="selector-class">.me</span>~~</span><br></pre></td></tr></table></figure></li><li>演示：<br><a href="http://www.ilzv.me" target="_blank" rel="noopener">www.ilzv.me</a> <del><a href="http://www.ilzv.me" target="_blank" rel="noopener">www.ilzv.me</a></del></li></ul><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><ul><li>使用HTML中的<code>&lt;u&gt;</code>标签来实现<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>带下划线的文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>演示：<u>带下划线的文本</u></li></ul><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><ul><li>脚注是对文本的补充说明，格式如下：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[^要注明的文字]</span><br></pre></td></tr></table></figure></li><li>实例：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">创建脚注格式类似这样 [^lzv]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^lzv</span>]: <span class="link">学的不仅是技术，更是梦想！！！</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="链接推荐"><a href="#链接推荐" class="headerlink" title="链接推荐"></a><span id="jump">链接推荐</span></h3><ul><li><a href="https://www.runoob.com/markdown/md-advance.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-advance.html</a></li><li><a href="https://juejin.im/post/5ad6e09e518825557b4d451c" target="_blank" rel="noopener">https://juejin.im/post/5ad6e09e518825557b4d451c</a></li><li><a href="https://blog.csdn.net/u010177286/article/details/50358720" target="_blank" rel="noopener">https://blog.csdn.net/u010177286/article/details/50358720</a></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Bolg</category>
      </categories>
      <tags>
        <tag>Bolg</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown在Next下的高级书写</title>
    <url>/posts/73564.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><div class="note info"><p>本文中列出了Next特殊的Markdown渲染格式，在其他环境写作时不一定支持。<br><em>若想在不支持的环境下使用，可以在对应的环境中修改主题对应的css样式：把next主题中的这种标签的css样式复制到环境下的css源码中，这样就可以在自己使用的写作环境中支持了</em></p></div><a id="more"></a><div class="tabs" id="演示"><ul class="nav-tabs"><li class="tab"><a href="#演示-1">注意</a></li><li class="tab active"><a href="#演示-2">演示</a></li></ul><div class="tab-content"><div class="tab-pane" id="演示-1"><p><strong>注意要点</strong></p><ul><li><p><a href="#jump4">note标签的官方文档使用</a></p></li><li><p><a href="#jump5">note错误格式</a></p></li><li><p><a href="#jump3">个人常用格式</a></p></li></ul></div><div class="tab-pane active" id="演示-2"><p><strong>以下为样式示例，点击可调至对应演示：</strong></p><ul><li><p><a href="#jump1">Next下的note标签</a></p></li><li><p><a href="#jump0">Next下的note标签(HTML)</a></p></li><li><p><a href="#jump2">FontAwesome图标优化</a></p></li><li><p><a href="#jump6">diff语言完成代码块内部样式高亮</a></p></li><li><p><a href="#jump7">文本居中引用</a></p></li><li><p><a href="#jump8">Next下的label标签</a></p></li><li><p><a href="#jump9">Next下的tabs标签</a></p></li><li><p><a href="#jump10">Next下的样式按钮</a></p></li><li><p><a href="#jump11">页面内锚点</a></p></li></ul></div></div></div><h2 id="Next下的note标签"><a href="#Next下的note标签" class="headerlink" title="Next下的note标签"></a><span id="jump1">Next下的note标签</span></h2><h4 id="0、note格式"><a href="#0、note格式" class="headerlink" title="0、note格式"></a>0、note格式</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123;% note [<span class="keyword">class</span>] [<span class="keyword">no</span>-icon] %&#125;</span><br><span class="line">这里写你需要写的内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">// 注意上面的<span class="keyword">class</span>和<span class="keyword">no</span>-icon属性是可以选择的</span><br><span class="line">[<span class="keyword">class</span>]   : <span class="keyword">default</span> | <span class="keyword">primary</span> | success | <span class="keyword">info</span> | <span class="built_in">warning</span> | danger.</span><br><span class="line">[<span class="keyword">no</span>-icon] : <span class="keyword">Disable</span> icon <span class="keyword">in</span> note.</span><br></pre></td></tr></table></figure><h4 id="1、没有定义样式类别"><a href="#1、没有定义样式类别" class="headerlink" title="1、没有定义样式类别"></a>1、没有定义样式类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>%&#125;</span><br><span class="line">(没有定义样式类别)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note"><p>(没有定义样式类别)</p></div><h4 id="2、默认的类别"><a href="#2、默认的类别" class="headerlink" title="2、默认的类别"></a>2、默认的类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note default </span>%&#125;</span><br><span class="line">默认形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default"><p>默认形式的类别</p></div><h4 id="3、primary形式的类别"><a href="#3、primary形式的类别" class="headerlink" title="3、primary形式的类别"></a>3、primary形式的类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>primary %&#125;</span><br><span class="line">首要类型形式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note primary"><p>首要类型形式</p></div><h4 id="4、info形式的类别"><a href="#4、info形式的类别" class="headerlink" title="4、info形式的类别"></a>4、info形式的类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">info</span> %&#125;</span><br><span class="line">info形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>info形式的类别</p></div><h4 id="5、success形式的类别"><a href="#5、success形式的类别" class="headerlink" title="5、success形式的类别"></a>5、success形式的类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>success %&#125;</span><br><span class="line">success形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note success"><p>success形式的类别</p></div><h4 id="6、warning形式的类别"><a href="#6、warning形式的类别" class="headerlink" title="6、warning形式的类别"></a>6、warning形式的类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">warning</span> %&#125;</span><br><span class="line">warning形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>warning形式的类别</p></div><h4 id="7、danger形式的类别"><a href="#7、danger形式的类别" class="headerlink" title="7、danger形式的类别"></a>7、danger形式的类别</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;</span><br><span class="line">danger形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger"><p>danger形式的类别</p></div><h4 id="8、无图标形式的note标签"><a href="#8、无图标形式的note标签" class="headerlink" title="8、无图标形式的note标签"></a>8、无图标形式的note标签</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">info</span> no-icon %&#125;</span><br><span class="line">没有图标的note标签</span><br><span class="line">&#123;% code %&#125;</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon"><p>没有图标的note标签</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br></pre></td></tr></table></figure></div><h4 id="9、无图标形式的success标签"><a href="#9、无图标形式的success标签" class="headerlink" title="9、无图标形式的success标签"></a>9、无图标形式的success标签</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>success %&#125;</span><br><span class="line">在note中插入代码块</span><br><span class="line">&#123;% code %&#125;</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note success"><p>在note中插入代码块</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br><span class="line">code block <span class="keyword">in</span><span class="built_in"> note </span>tag</span><br></pre></td></tr></table></figure></div><h4 id="10、note标签中插入有序无序列表"><a href="#10、note标签中插入有序无序列表" class="headerlink" title="10、note标签中插入有序无序列表"></a>10、note标签中插入有序无序列表</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note default </span>%&#125;</span><br><span class="line">在note中放入无序、有序列表</span><br><span class="line">* ul</span><br><span class="line">* ul</span><br><span class="line">* ul</span><br><span class="line"></span><br><span class="line">1. ol</span><br><span class="line">2. ol</span><br><span class="line">3. ol</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default"><p>在note中放入无序、有序列表</p><ul><li>ul</li><li>ul</li><li>ul</li></ul><ol><li>ol</li><li>ol</li><li>ol</li></ol></div><h4 id="11、note标签中插入表格"><a href="#11、note标签中插入表格" class="headerlink" title="11、note标签中插入表格"></a>11、note标签中插入表格</h4><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">|<span class="string"> 1 </span>|<span class="string"> 2 </span>|</span><br><span class="line">|<span class="string"> - </span>|<span class="string"> - </span>|</span><br><span class="line">|<span class="string"> 3 </span>|<span class="string"> 4 </span>|</span><br><span class="line">|<span class="string"> 5 </span>|<span class="string"> 6 </span>|</span><br><span class="line">|<span class="string"> 7 </span>|<span class="string"> 8 </span>|</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default"><table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td>3</td><td>4</td></tr><tr><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td></tr></tbody></table></div><h2 id="Next下的note标签-HTML"><a href="#Next下的note标签-HTML" class="headerlink" title="Next下的note标签(HTML)"></a><span id="jump0">Next下的note标签(HTML)</span></h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">note</span> <span class="symbol">default</span>"&gt;&lt;<span class="symbol">p</span>&gt;<span class="symbol">default</span>&lt;/<span class="symbol">p</span>&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="note default"><p>default</p></div><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">note</span> <span class="symbol">primary</span>"&gt;&lt;<span class="symbol">p</span>&gt;<span class="symbol">primary</span>&lt;/<span class="symbol">p</span>&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="note primary"><p>primary</p></div><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">note</span> <span class="symbol">success</span>"&gt;&lt;<span class="symbol">p</span>&gt;<span class="symbol">success</span>&lt;/<span class="symbol">p</span>&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="note success"><p>success</p></div><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">note</span> <span class="symbol">info</span>"&gt;&lt;<span class="symbol">p</span>&gt;<span class="symbol">info</span>&lt;/<span class="symbol">p</span>&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="note info"><p>info</p></div><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">note</span> <span class="symbol">warning</span>"&gt;&lt;<span class="symbol">p</span>&gt;<span class="symbol">warning</span>&lt;/<span class="symbol">p</span>&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="note warning"><p>warning</p></div><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">note</span> <span class="symbol">danger</span>"&gt;&lt;<span class="symbol">p</span>&gt;<span class="symbol">danger</span>&lt;/<span class="symbol">p</span>&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><div class="note danger"><p>danger</p></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger no-icon"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger no-icon<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note danger no-icon"><p>danger no-icon</p></div><h2 id="FontAwesome图标优化"><a href="#FontAwesome图标优化" class="headerlink" title="FontAwesome图标优化"></a><span id="jump2">FontAwesome图标优化</span></h2><ol><li><i class="fa fa-pencil"></i> 支持 Markdown<br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li><li><i class="fa fa-cloud-upload"></i> 一件部署<br><i>只需一条指令即可部署到 GitHub Pages，或其他网站。</i></li><li><i class="fa fa-cog"></i> 丰富的插件<br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。</i></li></ol><p>源码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 支持 Markdown</span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span>&gt;</span>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">2. <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cloud-upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 一件部署</span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span>&gt;</span>只需一条指令即可部署到 GitHub Pages，或其他网站。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">3. <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 丰富的插件</span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span>&gt;</span>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade，CoffeeScript。<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">   采用的是 Font Awesome 的图标，下面给出一些简单的使用例子，更多请查看官网的使用示例。</span><br></pre></td></tr></table></figure><p>采用的是 <a href="https://fontawesome.com/v4.7.0/" target="_blank" rel="noopener">Font Awesome</a> 的图标，下面给出一些简单的使用例子，更多请查看官网的<a href="https://fontawesome.com/v4.7.0/examples/" target="_blank" rel="noopener">使用示例</a>。</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> &lt;i <span class="class"><span class="keyword">class</span>="<span class="title">fa</span> <span class="title">fa</span>-<span class="title">pencil</span>"&gt;&lt;/<span class="title">i</span>&gt; 铅笔</span></span></span><br><span class="line"><span class="ruby">- &lt;i <span class="class"><span class="keyword">class</span>="<span class="title">fa</span> <span class="title">fa</span>-<span class="title">cloud</span>-<span class="title">upload</span>"&gt;&lt;/<span class="title">i</span>&gt; 上传</span></span></span><br><span class="line"><span class="ruby">- &lt;i <span class="class"><span class="keyword">class</span>="<span class="title">fa</span> <span class="title">fa</span>-<span class="title">download</span>"&gt;&lt;/<span class="title">i</span>&gt; 下载</span></span></span><br></pre></td></tr></table></figure><ul><li><i class="fa fa-pencil"></i> 铅笔</li><li><i class="fa fa-cloud-upload"></i> 上传</li><li><i class="fa fa-download"></i> 下载<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> &lt;i <span class="class"><span class="keyword">class</span>="<span class="title">fa</span> <span class="title">fa</span>-<span class="title">download</span>"&gt;&lt;/<span class="title">i</span>&gt; 下载</span></span></span><br><span class="line"><span class="ruby">- &lt;i <span class="class"><span class="keyword">class</span>="<span class="title">fa</span> <span class="title">fa</span>-<span class="title">download</span> <span class="title">fa</span>-<span class="title">lg</span>"&gt;&lt;/<span class="title">i</span>&gt; 下载变大 33%</span></span></span><br><span class="line"><span class="ruby">- &lt;i <span class="class"><span class="keyword">class</span>="<span class="title">fa</span> <span class="title">fa</span>-<span class="title">download</span> <span class="title">fa</span>-2<span class="title">x</span>"&gt;&lt;/<span class="title">i</span>&gt; 下载两倍大</span></span></span><br></pre></td></tr></table></figure></li><li><i class="fa fa-download"></i> 下载</li><li><i class="fa fa-download fa-lg"></i> 下载变大 33%</li><li><i class="fa fa-download fa-2x"></i> 下载两倍大<h2 id="diff语言完成代码块内部样式高亮"><a href="#diff语言完成代码块内部样式高亮" class="headerlink" title="diff语言完成代码块内部样式高亮"></a><span id="jump6">diff语言完成代码块内部样式高亮</span></h2>Next主题其实是自带代码块高亮显示的，但是有另外一种好玩的代码块高亮写法，叫<code>diff</code>语言<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line"># 代码自动高亮</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br></pre></td></tr></table></figure>只需要在markdown语法代码块的语言选择处写上<code>diff</code>即可，然后在相应代码前面加上<code>-</code>和<code>+</code>就行了。不过默认的<code>-</code>是绿色，<code>+</code>是红色，与 GitHub 上相反，也可以自己修改成Github上样式。<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章```代码块diff样式</span></span><br><span class="line">pre .<span class="class">addition </span>&#123;</span><br><span class="line"><span class="symbol">    background:</span> <span class="meta">#e6ffed;</span></span><br><span class="line">&#125;</span><br><span class="line">pre .<span class="class">deletion </span>&#123;</span><br><span class="line"><span class="symbol">    background:</span> <span class="meta">#ffeef0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当然，要是你不满意顶部的文字样式，也可以自己在<code>custom.styl</code>自定义：<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章```代码块顶部样式</span></span><br><span class="line"><span class="selector-class">.highlight</span> <span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span> <span class="selector-tag">figcaption</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rgb(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="文本居中引用"><a href="#文本居中引用" class="headerlink" title="文本居中引用"></a><span id="jump7">文本居中引用</span></h2><p>效果：</p><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">cq</span> %&#125;</span></span><br><span class="line"><span class="xml">人生乃是一面镜子，</span></span><br><span class="line"><span class="xml">从镜子里认识自己，</span></span><br><span class="line"><span class="xml">我要称之为头等大事，</span></span><br><span class="line"><span class="xml">也只是我们追求的目的！</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endcq</span> %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Next下的label标签"><a href="#Next下的label标签" class="headerlink" title="Next下的label标签"></a><span id="jump8">Next下的label标签</span></h2><p>首先需要在Next主题<code>_config.xml</code>中配置：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Label tag.</span></span><br><span class="line"><span class="keyword">label</span><span class="bash">: <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>然后效果如下（@ 前面的是label的名字，后面的是要显示的文字）：</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;% label <span class="keyword">default</span>@<span class="keyword">default</span> %&#125;</span></span><br></pre></td></tr></table></figure><span class="label default">default</span><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="meta">label</span> <span class="meta">primary</span>@<span class="meta">primary</span> %&#125;</span><br></pre></td></tr></table></figure><span class="label primary">primary</span><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">label</span> success@success %&#125;</span></span><br></pre></td></tr></table></figure><span class="label success">success</span><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">label</span> info@info %&#125;</span></span><br></pre></td></tr></table></figure><span class="label info">info</span><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&#123;% label <span class="keyword">warning</span>@warning %&#125;</span><br></pre></td></tr></table></figure><span class="label warning">warning</span><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">label</span> danger@danger %&#125;</span></span><br></pre></td></tr></table></figure><span class="label danger">danger</span><h2 id="Next下的tabs标签"><a href="#Next下的tabs标签" class="headerlink" title="Next下的tabs标签"></a><span id="jump9">Next下的tabs标签</span></h2><p>效果：</p><div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">自定义名1</a></li><li class="tab active"><a href="#选项卡-2">自定义名2</a></li><li class="tab"><a href="#选项卡-3">自定义名3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 11111</p></div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong> 22222</p></div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 33333</p></div></div></div><p>源码：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> 选项卡, 2 %&#125;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 自定义名1--&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 1** 11111</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 自定义名2--&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 2** 22222</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 自定义名3--&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 3** 33333</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure><p>首先还是需要在Next主题配置文件中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tabs tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>然后上面源码中, 2表示一开始在第二个选项卡，非必须，若数值为-1则隐藏选项卡内容。更多用法请查看<a href="">这个页面</a>。</p><h2 id="Next下的样式按钮"><a href="#Next下的样式按钮" class="headerlink" title="Next下的样式按钮"></a><span id="jump10">Next下的样式按钮</span></h2><p>效果：</p><a class="btn" href="https://www.baidu.com" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>点击下载百度</a><p>源码：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&#123;% btn http<span class="variable">s:</span>//www.baidu.<span class="keyword">com</span>, 点击下载百度, download fa-<span class="keyword">lg</span> fa-fw %&#125;</span><br></pre></td></tr></table></figure><p>关于按钮的更多使用可以前往<a href="">这个页面</a>查看。</p><h2 id="页面内锚点"><a href="#页面内锚点" class="headerlink" title="页面内锚点"></a><span id="jump11">页面内锚点</span></h2><ul><li><p>在需要跳转的位置添加锚点</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jump"</span>&gt;</span>跳转到的地方<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在需要点击跳转的位置，使用上面的id，格式类似超链接的形式：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">点击跳转</span>](<span class="link">#jump</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如目录语法为：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">MarkDown页面内跳转测试</span>](<span class="link">#jump</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>下面实际目录语法为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jump"</span>&gt;</span>MarkDown页面内跳转测试<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 标题</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"><span class="section">## 目录</span></span><br><span class="line"><span class="bullet">1. </span>[<span class="string">目录1</span>](<span class="link">#jump1</span>)</span><br><span class="line"><span class="bullet">2. </span>[<span class="string">目录2</span>](<span class="link">#jump2</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="section">### &lt;span id="jump1"&gt;1. 目录1&lt;/span&gt;</span></span><br><span class="line">---</span><br><span class="line"><span class="section">### &lt;span id="jump2"&gt;2. 目录2&lt;/span&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="note标签的官方文档使用"><a href="#note标签的官方文档使用" class="headerlink" title="note标签的官方文档使用"></a><span id="jump4">note标签的官方文档使用</span></h2><p>首先我们需要在Next主题<code>_config.xml</code>中设置一下功能开关，有些默认是开的，有些默认是关的：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">note:</span><br><span class="line">  #<span class="built_in"> Note </span>tag style values:</span><br><span class="line">  #  -<span class="built_in"> simple </span>   bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla <span class="keyword">or</span> StackOverflow.</span><br><span class="line">  #  - disabled  <span class="builtin-name">disable</span> all CSS styles import of<span class="built_in"> note </span>tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: <span class="literal">false</span></span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background <span class="keyword">in</span> % <span class="keyword">for</span> modern <span class="keyword">and</span> flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied <span class="keyword">to</span> label tag variables. This option can work with disabled<span class="built_in"> note </span>tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><span id="jump5">注意事项</span></h2><p>内容<code>必须</code>要跟note标签<code>不在</code>一行：</p><div class="note success"><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;</span><br><span class="line">note text,<span class="built_in"> note </span>text,<span class="built_in"> note </span>text</span><br><span class="line">note text,<span class="built_in"> note </span>text,<span class="built_in"> note </span>text</span><br><span class="line">note text,<span class="built_in"> note </span>text,<span class="built_in"> note </span>text</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><p>错误演示：</p><div class="note danger"><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;note text,<span class="built_in"> note </span>text,<span class="built_in"> note </span>text&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class="note danger"><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;note text</span><br><span class="line">note text</span><br><span class="line">note text</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><h1 id="个人常用格式"><a href="#个人常用格式" class="headerlink" title="个人常用格式"></a><span id="jump3">个人常用格式</span></h1><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> 选项卡, 2 %&#125;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 自定义名1--&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 1** 内容1</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 自定义名2--&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 2** 内容2</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab 自定义名3--&gt;</span></span></span><br><span class="line"><span class="xml">**这是选项卡 3** 内容3</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">## 目录</span></span><br><span class="line"><span class="xml">1. [目录1](#jump1)</span></span><br><span class="line"><span class="xml">2. [目录2](#jump2)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>[文章末尾](#jump)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml">---</span></span><br><span class="line"><span class="xml">### <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jump1"</span>&gt;</span>1. 目录1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">---</span></span><br><span class="line"><span class="xml">### <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jump2"</span>&gt;</span>2. 目录2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">---</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jump"</span>&gt;</span>文章末尾<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Bolg</category>
      </categories>
      <tags>
        <tag>Bolg</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Bolg</category>
      </categories>
      <tags>
        <tag>Bolg</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali Linux--绕过启动密码</title>
    <url>/posts/54745.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/TIM截图20200417172614.png"><p><em>遇到上述情况怎么处理？下面我在<strong>Kali Linux 2019.3</strong>环境下演示——如何绕过Kali密码登陆root账户。</em></p><a id="more"></a><h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><ol><li><p>启动 Kali Linux, 在启动了 GNU GRUB (GNU 引导) 界面时按 <code>e</code> 进入编辑模式.<br>之后找到如下图所示的位置。</p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/TIM截图20200417173305.png"></li><li><p>把其中的 <code>ro</code> 改成 <code>rw</code>, 并删除 <code>.gz</code> 后面的 <code>quite</code>, 替换成 <code>init=/bin/bash</code>.</p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/TIM截图20200417173437.png"></li><li><p>修改完成之后, 使用 <code>Ctrl +X</code> 组合键继续系统的启动进程, 此时是可以无密码直接进系统的, 如下图。</p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/TIM截图20200417173556.png"></li><li><p>在最后图中<code>#</code>的后面输入用于重置密码<code>passwd</code>命令，两次输入最新设定的密码后重启系统，即可正常登陆。</p></li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Kali Linux</category>
      </categories>
      <tags>
        <tag>Kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_函数基础_06</title>
    <url>/posts/82745.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">函数与程序结构（1）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><h3 id="例1：返回值的类型"><a href="#例1：返回值的类型" class="headerlink" title="例1：返回值的类型"></a>例1：返回值的类型</h3><img src="\images\images\2020-05-30_180908.png" width="100%" height="100%" align="center/"><h3 id="例2：return后无返回值时，相当于跳出语句"><a href="#例2：return后无返回值时，相当于跳出语句" class="headerlink" title="例2：return后无返回值时，相当于跳出语句"></a>例2：return后无返回值时，相当于跳出语句</h3><img src="\images\images\2020-05-30_181255.png" width="100%" height="100%" align="center/"><h3 id="例3：没有声明返回值时，默认为int型"><a href="#例3：没有声明返回值时，默认为int型" class="headerlink" title="例3：没有声明返回值时，默认为int型"></a>例3：没有声明返回值时，默认为int型</h3><img src="\images\images\2020-05-30_181417.png" width="100%" height="100%" align="center/"><h3 id="例4：参数的使用"><a href="#例4：参数的使用" class="headerlink" title="例4：参数的使用"></a>例4：参数的使用</h3><img src="\images\images\2020-05-30_181501.png" width="100%" height="100%" align="center/"><h3 id="例5：引用型参数的作用"><a href="#例5：引用型参数的作用" class="headerlink" title="例5：引用型参数的作用"></a>例5：引用型参数的作用</h3><img src="\images\images\2020-05-30_181609.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-30_181706.png" width="100%" height="100%" align="center/"><p><strong>引用型参数的格式：</strong><br>void increase(int &amp;X);<br>void increase(int&amp; X);</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_类型_01</title>
    <url>/posts/84653.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">类型、运算符、表达式（1）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>是装数据的容器，数据变，容器不变。<br>变量量在使前要先定义，基本格式为：<br><strong>变量量类型名 变量量名1,变量量名2 …;</strong><br>也就是左例例中a、b、c三个变量量的定义可写为：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a, b, c; </span><br><span class="line"><span class="built_in">int</span> a = <span class="number">0</span>, b, c = <span class="number">0</span>;<span class="comment">//初始化</span></span><br></pre></td></tr></table></figure><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><p>•是由字⺟母（’_’被看作字⺟母）和数字组成的序列列，但第⼀一个字符 必须为字⺟母；</p><p>•大小写字⺟母是有区别的；</p><p>•如int等关键字，已被语⾔言本身占有，不不能做为变量量名。</p><div class="note success"><p>推荐一个在线编译网站。</p></div><p><a href="https://www.onlinegdb.com/online_c++_compiler" target="_blank" rel="noopener">https://www.onlinegdb.com/online_c++_compiler</a></p><img src="\images\images\2020-05-28_161811.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-28_161949.png" width="100%" height="100%" align="center/"><h3 id="施加在基本类型上的限定符"><a href="#施加在基本类型上的限定符" class="headerlink" title="施加在基本类型上的限定符"></a>施加在基本类型上的限定符</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">short <span class="keyword">int</span> a; <span class="comment">//int可省略略不不写 </span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> a; <span class="comment">//int可省略略不不写</span></span><br></pre></td></tr></table></figure><p>short限定符尽可能的使int变短，long尽可能的使int变长。<br>short和int类型不小于16位，int型可以是16位和32位，long类型不小于32位，具体 由所在机器而定。<br>signed与unsigned可⽤用来限定char型和所有整型（包括被short或long限定过的整型）。</p><p>signed <strong>整型</strong>等价于 <strong>整型</strong>。<br>unsigned <strong>整型</strong>使得原有整型⻓度不变，符号位变成了数据位，仅能表示0和正数。<br>signed char强制char可以存储有符号整数，unsigned char强制char可以存储⽆符号整数，char不加任何限定，则是否有符号根据所在机器而定。</p><img src="\images\images\2020-05-28_163407.png" width="100%" height="100%" align="center/"><h3 id="程序助记"><a href="#程序助记" class="headerlink" title="程序助记"></a>程序助记</h3><h4 id="程序1-检测C语言仅有的四种基本类型所占空间"><a href="#程序1-检测C语言仅有的四种基本类型所占空间" class="headerlink" title="程序1: 检测C语言仅有的四种基本类型所占空间"></a>程序1: 检测C语言仅有的四种基本类型所占空间</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(<span class="keyword">int</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序2：-施加在基本类型上的限定符"><a href="#程序2：-施加在基本类型上的限定符" class="headerlink" title="程序2： 施加在基本类型上的限定符"></a>程序2： 施加在基本类型上的限定符</h4><img src="\images\images\2020-05-28_164314.png" width="100%" height="100%" align="center/"><h4 id="程序3：-整数常量可以用八进制或者是十六进制表示"><a href="#程序3：-整数常量可以用八进制或者是十六进制表示" class="headerlink" title="程序3： 整数常量可以用八进制或者是十六进制表示"></a>程序3： 整数常量可以用八进制或者是十六进制表示</h4><img src="\images\images\2020-05-28_164617.png" width="100%" height="100%" align="center/"><h4 id="程序4：-字符常量也可以参与运算，实际是其对应的ASCII码参与运算"><a href="#程序4：-字符常量也可以参与运算，实际是其对应的ASCII码参与运算" class="headerlink" title="程序4： 字符常量也可以参与运算，实际是其对应的ASCII码参与运算"></a>程序4： 字符常量也可以参与运算，实际是其对应的ASCII码参与运算</h4><img src="\images\images\2020-05-28_164847.png" width="100%" height="100%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_运算符_02</title>
    <url>/posts/84325.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">类型、运算符、表达式（2）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="转义字符表"><a href="#转义字符表" class="headerlink" title="转义字符表"></a>转义字符表</h3><img src="\images\images\2020-05-28_165010.png" width="100%" height="100%" align="center/"><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><img src="\images\images\2020-05-28_170100.png" width="100%" height="100%" align="center/"><p><strong>程序1</strong><br><img src="\images\images\2020-05-28_170230.png" width="100%" height="100%" align="center/"></p><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><img src="\images\images\2020-05-28_171249.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-28_171313.png" width="100%" height="100%" align="center/"><p><strong>程序2</strong><br><img src="\images\images\2020-05-28_171506.png" width="100%" height="100%" align="center/"></p><h3 id="关系运算符-amp-amp-逻辑运算符"><a href="#关系运算符-amp-amp-逻辑运算符" class="headerlink" title="关系运算符 &amp;&amp; 逻辑运算符"></a>关系运算符 &amp;&amp; 逻辑运算符</h3><img src="\images\images\2020-05-28_172007.png" width="100%" height="100%" align="center/"><p><strong>程序3</strong><br><img src="\images\images\2020-05-28_171705.png" width="100%" height="100%" align="center/"></p><h3 id="赋值运算符-amp-amp-位运算符"><a href="#赋值运算符-amp-amp-位运算符" class="headerlink" title="赋值运算符 &amp;&amp; 位运算符"></a>赋值运算符 &amp;&amp; 位运算符</h3><img src="\images\images\2020-05-28_180953.png" width="100%" height="100%" align="center/"><p><strong>程序4: “&amp;”</strong><br><img src="\images\images\2020-05-28_180736.png" width="100%" height="100%" align="center/"></p><p><strong>程序5: “^”、”~”</strong><br><img src="\images\images\2020-05-28_181118.png" width="100%" height="100%" align="center/"></p><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="Sizeof运算符"><a href="#Sizeof运算符" class="headerlink" title="Sizeof运算符"></a>Sizeof运算符</h4><img src="\images\images\2020-05-28_181356.png" width="100%" height="100%" align="center/"><p><strong>程序6：</strong><br><img src="\images\images\2020-05-28_181609.png" width="100%" height="100%" align="center/"></p><h4 id="问号运算符"><a href="#问号运算符" class="headerlink" title="问号运算符"></a>问号运算符</h4><img src="\images\images\2020-05-28_181412.png" width="100%" height="100%" align="center/"><p><strong>程序7：</strong><br><img src="\images\images\2020-05-28_181701.png" width="100%" height="100%" align="center/"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_类型转换_03</title>
    <url>/posts/64352.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">类型、运算符、表达式（3）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><img src="\images\images\2020-05-28_183815.png" width="100%" height="100%" align="center/"> 例子： <img src="\images\images\2020-05-28_183359.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-28_183429.png" width="100%" height="100%" align="center/"><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><p><strong>（类型名）表达式</strong><br><img src="\images\images\2020-05-28_185244.png" width="100%" height="100%" align="center/"><br><strong>注意：</strong> 类型转换只体现在结果上，并不会改变被转换变量的类型。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_分支语句_04</title>
    <url>/posts/82432.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">控制流（1）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><img src="\images\images\2020-05-28_191738.png" width="100%" height="100%" align="center/"><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h3><img src="\images\images\2020-05-28_191823.png" width="100%" height="100%" align="center/"><h3 id="else-if语句"><a href="#else-if语句" class="headerlink" title="else if语句"></a>else if语句</h3><img src="\images\images\2020-05-28_192137.png" width="100%" height="100%" align="center/"><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><img src="\images\images\2020-05-28_192408.png" width="100%" height="100%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_循环语句_05</title>
    <url>/posts/82231.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">控制流（2）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><img src="\images\images\2020-05-28_195640.png" width="100%" height="100%" align="center/"><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><img src="\images\images\2020-05-28_195846.png" width="100%" height="100%" align="center/"><h3 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a>while循环</h3><img src="\images\images\2020-05-28_195926.png" width="100%" height="100%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_作用域规则_07</title>
    <url>/posts/85767.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">函数与程序结构（2）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="作用域规则"><a href="#作用域规则" class="headerlink" title="作用域规则"></a>作用域规则</h2><h3 id="一个函数体内所定义的“a”，其生命周期只存在函数调用这一段，当函数执行完之后，其所在的空间就会被系统回收掉"><a href="#一个函数体内所定义的“a”，其生命周期只存在函数调用这一段，当函数执行完之后，其所在的空间就会被系统回收掉" class="headerlink" title="一个函数体内所定义的“a”，其生命周期只存在函数调用这一段，当函数执行完之后，其所在的空间就会被系统回收掉"></a>一个函数体内所定义的“a”，其生命周期只存在函数调用这一段，当函数执行完之后，其所在的空间就会被系统回收掉</h3><img src="\images\images\2020-05-30_183741.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-30_184314.png" width="100%" height="100%" align="center/"><p><strong>在函数执行完之后，函数中的a生命周期就已经结束了，对函数外面的a不会有影响</strong></p><h3 id="若要改变函数外面的a该如何处理？"><a href="#若要改变函数外面的a该如何处理？" class="headerlink" title="若要改变函数外面的a该如何处理？"></a>若要改变函数外面的a该如何处理？</h3><p><strong>使用引用型</strong><br><img src="\images\images\2020-05-30_184412.png" width="100%" height="100%" align="center/"></p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p><strong>在内部可以看到外部</strong><br><img src="\images\images\2020-05-30_184711.png" width="100%" height="100%" align="center/"></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p><strong>在函数中定义了和全局变量相同的“a”，函数中局部变量的a会“屏蔽”外部的a，此时相当于改变了a的值</strong><br><img src="\images\images\2020-05-30_185154.png" width="100%" height="100%" align="center/"></p><h3 id="语句块所形成的作用域（局部）"><a href="#语句块所形成的作用域（局部）" class="headerlink" title="语句块所形成的作用域（局部）"></a>语句块所形成的作用域（局部）</h3><p><strong>外层的作用域不能控制内层变量，内层可以操作外层变量</strong><br><img src="\images\images\2020-05-30_185633.png" width="100%" height="100%" align="center/"></p><p><strong>内层作用域对变量的操作，并不会影响外层作用域</strong><br><img src="\images\images\2020-05-30_185921.png" width="100%" height="100%" align="center/"></p><p><strong>此时在一个程序中，遇到了名字相同的变量，相信你不会再分不清作用范围了</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_静态变量与递归_08</title>
    <url>/posts/64521.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">函数与程序结构（3）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p><strong>静态变量就是给普通的变量增加一个“static”</strong><br>那他的作用是什么呢？</p><h3 id="static的作用及行为"><a href="#static的作用及行为" class="headerlink" title="static的作用及行为"></a>static的作用及行为</h3><p><strong>此时定义了6次变量a，同时函数结束后销毁了6个a</strong><br><img src="\images\images\2020-05-30_191400.png" width="100%" height="100%" align="center/"><br><strong>定义一个函数f的静态变量，作用有三点：</strong><br>1、不管函数被调用多少次，静态变量只定义一次<br>2、静态变量只属于f函数<br>3、函数结束之后，静态变量a并不会被回收<br><img src="\images\images\2020-05-30_190939.png" width="100%" height="100%" align="center/"></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><strong>递归分为直接递归和间接递归，在考研阶段主要使用直接递归</strong></p><p>什么是直接递归？ <strong>直接递归就是函数在函数体内，对自己进行调用</strong></p><h3 id="直接递归的执行流程"><a href="#直接递归的执行流程" class="headerlink" title="直接递归的执行流程"></a>直接递归的执行流程</h3><p><strong>一个递归入口的执行流程</strong><br><img src="\images\images\2020-05-30_192301.png" width="100%" height="100%" align="center/"><br><strong>两个递归入口的执行流程</strong>（重要）<br><img src="\images\images\2020-05-30_192558.png" width="100%" height="100%" align="center/"></p><h3 id="为了增强封装性和程序的可读性，递归配合静态变量使用："><a href="#为了增强封装性和程序的可读性，递归配合静态变量使用：" class="headerlink" title="为了增强封装性和程序的可读性，递归配合静态变量使用："></a>为了增强封装性和程序的可读性，递归配合静态变量使用：</h3><p>如何要保证递归函数中的变量不被回收，可以有两种方法：<br><strong>1、静态变量</strong><br><strong>2、全局变量</strong><br>很明显，全局变量会降低封装性，同时可读性不高，所以推荐使用静态变量<br><img src="\images\images\2020-05-30_193159.png" width="100%" height="100%" align="center/"><br><img src="\images\images\2020-05-30_193304.png" width="100%" height="100%" align="center/"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_指针_09</title>
    <url>/posts/67241.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">指针与数组（1）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="指针与地址"><a href="#指针与地址" class="headerlink" title="指针与地址"></a>指针与地址</h2><div class="note warning"><p><strong>首先要注意取地址运算符“ &amp; ”和引用型参数用到的“ &amp; ”是不同的</strong><br>例子：<br>引用型参数： 函数名(int &amp;a)<br>取地址符： int a = 10;<br>&a;</p></div><p><strong>指针型变量和普通变量定义方法相同，只不过指针型所指向的是地址</strong><br><img src="\images\images\2020-05-30_200401.png" width="100%" height="100%" align="center/"></p><div class="note warning"><p><strong>要注意定义指针用到的“ * ” 和取值运算符“ * ”是不同的</strong><br>例子：<br>指针定义： int <em>a_ = &a;<br>取值符： ++(</em>a_)</p></div><p><strong>重要功能：通过指针修改所指向变量的值</strong><br><img src="\images\images\2020-05-30_201040.png" width="100%" height="100%" align="center/"></p><p><strong>定义指针时，需要让指针指向一块空间，如何没有指向需要设置为：</strong><br><strong>int *P = NULL</strong><br><strong>没有置空可能会出现默认指向的内存中有遗留数据的现象</strong></p><h2 id="指针与函数的参数"><a href="#指针与函数的参数" class="headerlink" title="指针与函数的参数"></a>指针与函数的参数</h2><p><strong>上面的内容中我们使用“引用型传参”，这是C++的语法，那如果要求在纯C下调用参数该怎么完成呢？</strong></p><p><strong>可以使用函数来完成内外传参的操作：需要配合取地址和指针完成</strong><br>下面给出对比程序：<br><img src="\images\images\2020-05-30_202259.png" width="100%" height="100%" align="center/"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_数组_10</title>
    <url>/posts/234231.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">指针与数组（2）</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="定义一个数组"><a href="#定义一个数组" class="headerlink" title="定义一个数组"></a>定义一个数组</h2><img src="\images\images\2020-05-30_202706.png" width="100%" height="100%" align="center/"><h2 id="数组的初始化和访问"><a href="#数组的初始化和访问" class="headerlink" title="数组的初始化和访问"></a>数组的初始化和访问</h2><img src="\images\images\2020-05-30_203404.png" width="100%" height="100%" align="center/"><h2 id="使用指针访问数组"><a href="#使用指针访问数组" class="headerlink" title="使用指针访问数组"></a>使用指针访问数组</h2><p><strong>1、把数组的名字传给指针，相当于把数组中第一个数据的地址（首地址）传给了指针</strong><br><strong>2、因为数组空间是连续的，所以可以连续输出</strong><br>3、如果数组内不写值，会默认通过初始化值来自动分配空间<br><img src="\images\images\2020-05-30_203956.png" width="100%" height="100%" align="center/"></p><p><strong>定义字符串的时候，实际上最后还有一个“\n”，内存空间+1</strong><br><img src="\images\images\2020-05-30_210542.png" width="100%" height="100%" align="center/"></p><p><strong>指针指向数组空间，修改指针无法修改数组内容</strong><br><img src="\images\images\2020-05-30_211239.png" width="100%" height="100%" align="center/"><br><img src="\images\images\2020-05-30_210722.png" width="100%" height="100%" align="center/"></p><h2 id="指针型数组"><a href="#指针型数组" class="headerlink" title="指针型数组"></a>指针型数组</h2><p><strong>指针型数组的初始化</strong><br><img src="\images\images\2020-05-30_212604.png" width="100%" height="100%" align="center/"><br><strong>一维数组作为函数参数：</strong><br><img src="\images\images\2020-05-30_213617.png" width="100%" height="100%" align="center/"></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p><strong>定义：每一个元素都是一维数组的一维数组</strong><br><img src="\images\images\2020-05-30_213115.png" width="100%" height="100%" align="center/"></p><p><strong>程序助记</strong><br><img src="\images\images\2020-05-30_213136.png" width="100%" height="100%" align="center/"></p><p><strong>二维数组作为函数参数：</strong><br><img src="\images\images\2020-05-30_213556.png" width="100%" height="100%" align="center/"></p><p><strong>二维字符串数组</strong><br><img src="\images\images\2020-05-30_213950.png" width="100%" height="100%" align="center/"><br><img src="\images\images\2020-05-30_214016.png" width="100%" height="100%" align="center/"></p><p><strong>二维字符串数组作为函数参数：</strong><br><img src="\images\images\2020-05-30_214321.png" width="100%" height="100%" align="center/"></p><h2 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h2><p>指针不仅可以指向变量，还可以指向函数</p><p><strong>下面给出同一个指针，指向不同的函数的例子：</strong><br><img src="\images\images\2020-05-30_214914.png" width="100%" height="100%" align="center/"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++_结构体与类_11</title>
    <url>/posts/624120.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">结构体与类</span><div class="note info"><p><strong>说明</strong><br>首先这篇教程并不是把握了C/C++所有的细节问题，而是从实用性出发，以面向研究生考试的应用为主。<br>通过 <strong>实例代码</strong>完整串联研究生入学所需、数据结构所需的语言基础。<br>为了更快捷方便，语言将采用 <strong>C/C++</strong>结合的方式（能在两种环境下都通用的代码），同时也符合部分院校纯C编译的要求。</p></div><a id="more"></a><h2 id="自定义更改-类型定义（typedef）"><a href="#自定义更改-类型定义（typedef）" class="headerlink" title="自定义更改:类型定义（typedef）"></a>自定义更改:类型定义（typedef）</h2><img src="\images\images\2020-05-30_223050.png" width="100%" height="100%" align="center/"><h2 id="结构体类型的定义"><a href="#结构体类型的定义" class="headerlink" title="结构体类型的定义"></a>结构体类型的定义</h2><p>下面所圈出的部分是结构体的定义方法，类似于 int、char等方式<br><img src="\images\images\2020-05-30_223813.png" width="100%" height="100%" align="center/"></p><h3 id="使用typedef给结构体定义换名"><a href="#使用typedef给结构体定义换名" class="headerlink" title="使用typedef给结构体定义换名"></a>使用typedef给结构体定义换名</h3><img src="\images\images\2020-05-30_224752.png" width="100%" height="100%" align="center/"><h3 id="更名后完整代码"><a href="#更名后完整代码" class="headerlink" title="更名后完整代码"></a>更名后完整代码</h3><img src="\images\images\2020-05-30_225006.png" width="100%" height="100%" align="center/"><h3 id="换名字一般在全局变量中进行，一般写成下面的-两种-格式："><a href="#换名字一般在全局变量中进行，一般写成下面的-两种-格式：" class="headerlink" title="换名字一般在全局变量中进行，一般写成下面的 两种 格式："></a>换名字一般在全局变量中进行，一般写成下面的 两种 格式：</h3><p>typedef换名操作，一般在定义结构体时使用<br><img src="\images\images\2020-05-30_224451.png" width="100%" height="100%" align="center/"></p><h2 id="指向结构体的指针"><a href="#指向结构体的指针" class="headerlink" title="指向结构体的指针"></a>指向结构体的指针</h2><p><strong>直接在结构体变量中取值的时候，我们使用“.”来操作。但使用指针时，要使用“-&gt;来取值/赋值”</strong><br><img src="\images\images\2020-05-30_230546.png" width="100%" height="100%" align="center/"></p><h2 id="自引用结构"><a href="#自引用结构" class="headerlink" title="自引用结构"></a>自引用结构</h2><h3 id="结构体中有一个指向与他自己类型相同的结构体变量的指针"><a href="#结构体中有一个指向与他自己类型相同的结构体变量的指针" class="headerlink" title="结构体中有一个指向与他自己类型相同的结构体变量的指针"></a>结构体中有一个指向与他自己类型相同的结构体变量的指针</h3><img src="\images\images\2020-05-30_231455.png" width="100%" height="100%" align="center/"><h3 id="指向与自己类型相同的结构体变量的指针有什么用？"><a href="#指向与自己类型相同的结构体变量的指针有什么用？" class="headerlink" title="指向与自己类型相同的结构体变量的指针有什么用？"></a>指向与自己类型相同的结构体变量的指针有什么用？</h3><p>能把分散在内存之中的多个结构体变量串成一串<br><img src="\images\images\2020-05-30_231518.png" width="100%" height="100%" align="center/"></p><h3 id="这段代码的核心操作"><a href="#这段代码的核心操作" class="headerlink" title="这段代码的核心操作"></a>这段代码的核心操作</h3><img src="\images\images\2020-05-30_231736.png" width="100%" height="100%" align="center/"><p><strong>P-&gt;next首先取到了p2的地址，并赋值给p，此时p指向p2，向前判断p！=null，依次执行p指向p5时满足，循环退出</strong></p><h3 id="以下是自引用结构在C-C-下最简便通用的使用方法：（需记忆）"><a href="#以下是自引用结构在C-C-下最简便通用的使用方法：（需记忆）" class="headerlink" title="以下是自引用结构在C/C++下最简便通用的使用方法：（需记忆）"></a>以下是自引用结构在C/C++下最简便通用的使用方法：（需记忆）</h3><img src="\images\images\2020-05-30_232311.png" width="100%" height="100%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>我&amp;我的博客</title>
    <url>/posts/25760.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><h2 id="斯是陋室-惟吾德馨"><a href="#斯是陋室-惟吾德馨" class="headerlink" title="斯是陋室 惟吾德馨"></a>斯是陋室 惟吾德馨</h2><p>不得不感叹时光荏苒，一转眼我已经在大学中走过了近三年的时光。这期间，有快乐，有苦涩，有失败，也有收获。今天，我想把那些一闪而逝的念头，还有我的经历与回忆记录下来。我相信这些灵感与经验，对我而言一定是最可贵的。</p><a id="more"></a><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>信息安全本科在读，爱口语，爱健身，爱旅行，爱生活。</p><p>WEB是我的兴趣也是我的方向，虽然积累不多，但我相信，这个过程就像我名字Ethan 中的含义“坚定不移”一样，我会坚持下去。</p><h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><p><a href="mailto:&#115;&#x70;&#x6f;&#116;&#108;&#x65;&#x73;&#115;&#64;&#x69;&#x6c;&#122;&#118;&#46;&#x6d;&#x65;">&#115;&#x70;&#x6f;&#116;&#108;&#x65;&#x73;&#115;&#64;&#x69;&#x6c;&#122;&#118;&#46;&#x6d;&#x65;</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Bolg</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>多台主机跨网段通讯模拟</title>
    <url>/posts/34535.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><h2 id="Let’s-Go"><a href="#Let’s-Go" class="headerlink" title="Let’s Go"></a>Let’s Go</h2><div class="note info no-icon"><p>实验环境：</p><ol><li>VMware15.5pro</li><li>WIn32、 Kali linux 、 linux</li><li><span class="label danger">注意：本次实验以三台主机为例，多台主机原理一致</span></li></ol></div><a id="more"></a><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>配置过程</strong></p><ul><li><a href="#jump1">配置步骤</a></li><li><a href="#jump2">测试结果</a></li><li><a href="#jump3">小结</a></li></ul></div><div class="tab-pane active" id="选项卡-2"><p><strong>可能存在的坑</strong></p><ul><li><a href="https://ilzv.me/posts/54745.html">Kali linux忘记启动密码</a></li><li><a href="#jump4">Linux双网卡激活失败</a></li><li><a href="#jump5">一切配置妥当，依然无法ping通</a></li></ul></div></div></div><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1、拓扑结构"><a href="#1、拓扑结构" class="headerlink" title="1、拓扑结构"></a>1、拓扑结构</h4><p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/33.png" alt="img"></p><h4 id="2、建立与外网隔离的VMware虚拟网段VMNet5、VMNet6"><a href="#2、建立与外网隔离的VMware虚拟网段VMNet5、VMNet6" class="headerlink" title="2、建立与外网隔离的VMware虚拟网段VMNet5、VMNet6"></a><span id="jump1">2、建立与外网隔离的VMware虚拟网段VMNet5、VMNet6</span></h4><p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/123.png" alt="img"></p><h4 id="3、将两虚拟机分别连接到两网段-并测试连通性"><a href="#3、将两虚拟机分别连接到两网段-并测试连通性" class="headerlink" title="3、将两虚拟机分别连接到两网段,并测试连通性"></a>3、将两虚拟机分别连接到两网段,并测试连通性</h4><p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/43.png" alt="img"></p><ul><li>修改IP</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Vnet6 </span><br><span class="line">      windows: IP:<span class="number">1.0</span><span class="number">.0</span><span class="number">.128</span> </span><br><span class="line">               子网掩码:<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">      linux:   IP:<span class="number">1.0</span><span class="number">.0</span><span class="number">.127</span></span><br><span class="line">               子网掩码:<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">Vnet5 </span><br><span class="line">      kali:    IP:<span class="number">222.222</span><span class="number">.222</span><span class="number">.128</span> </span><br><span class="line">               子网掩码:<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">      linux:   IP:<span class="number">222.222</span><span class="number">.222</span><span class="number">.127</span> </span><br><span class="line">               子网掩码:<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><ul><li>测试连通性</li></ul><p>此时因为win、linux / kali、linux在同一网段上，相同网段上的主机相互之间可以ping通。若不通，可能是因为linux默认只开启一张网卡，需要激活另一张网卡。</p><p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/232.png" alt="img"></p><h4 id="4、linux虚拟机开通数据包转发功能，添加路由，并测试连通性。"><a href="#4、linux虚拟机开通数据包转发功能，添加路由，并测试连通性。" class="headerlink" title="4、linux虚拟机开通数据包转发功能，添加路由，并测试连通性。"></a>4、linux虚拟机开通数据包转发功能，添加路由，并测试连通性。</h4><ol><li><p>为linux开启路由功能</p><p><code>cat /proc/sys/net/ipv4/ip_forward</code> (查询报文转发是否开启，如果结果是1即可，若结果不是1，则再执行下一条命令)</p><p><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code>(将其结果置为1)</p></li><li><p>为Kali虚拟机设置默认路由</p><p><code>route add default gw 222.222.222.127</code> (将222.222.222.127作为Kali的默认网关)</p></li><li><p>为Windows设置默认路由</p><p><code>route add 222.222.222.0 mask 255.255.255.0 1.0.0.127</code> (去往222.222.222.0/24网段的报文经由1.0.0.127主机转发)</p></li><li><p><span id="jump2">连通性测试</span></p><p>linux下：<code>ip ro</code>查看路由信息；windows下：<code>route print</code></p><p>下图为两网段主机ping通结果图</p><p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/TIM%E6%88%AA%E5%9B%BE20200426015237.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/EthanLzv/tuchuang/img/TIM%E6%88%AA%E5%9B%BE20200426015502.png" alt="img"></p><div class="note success"><p>至此，完成了这次以三台主机为例的跨网段通讯模拟</p></div></li></ol><h4 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a><span id="jump3">5、小结</span></h4><ul><li><p><span id="jump4">Linux无法激活双网卡：</span></p><p>在“虚拟网络编辑器”中选择需要开启的网络，勾选“使用本地DHCP服务将IP地址分配给虚拟机”</p></li><li><p><span id="jump5">联网连通测试方法：</span></p><p>1、同一网段上主机间的联通测试</p><p>处于同一网段的主机利用ping命令测试同网段内另一主机的连通性。</p><p>2、不同网段上主机间的联通测试</p><p>选取一台主机，使用ping命令，输入任一一个不同网段的主机IP号，看能否ping通另一网段的主机。</p><p>3、联通测试测试失败时的问题查找方法</p><p>查看Linux主机的设置是否正确，ip_forward是否已经打开。并且查看Linux主机上是否两张网卡都处于“激活”状态，若，没有，这需要激活。</p><p>4、<span class="label danger">注意网卡不要配置反了</span></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Kali Linux</category>
        <category>入侵检测</category>
      </categories>
      <tags>
        <tag>Kali Linux</tag>
        <tag>入侵检测</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统_(一)操作系统的基本概念_01</title>
    <url>/posts/53412.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">计算机系统概述(1)</span><div class="note info"><p><strong>内容</strong><br>1.操作系统的概念（定义）功能和目标</p></div><a id="more"></a><h2 id="1-操作系统的概念（定义）功能和目标"><a href="#1-操作系统的概念（定义）功能和目标" class="headerlink" title="1.操作系统的概念（定义）功能和目标"></a>1.操作系统的概念（定义）功能和目标</h2><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><img src="\images\images\2020-05-19_231004.png" width="100%" height="100%" align="center/"><h4 id="1-1-操作系统的定义"><a href="#1-1-操作系统的定义" class="headerlink" title="1.1 操作系统的定义"></a>1.1 操作系统的定义</h4><img src="\images\images\2020-05-19_224154.png" width="90%" height="90%" align="center/"><h4 id="1-2-操作系统的功能和目标"><a href="#1-2-操作系统的功能和目标" class="headerlink" title="1.2 操作系统的功能和目标"></a>1.2 操作系统的功能和目标</h4><h5 id="操作系统的功能和目标——作为系统资源的管理者"><a href="#操作系统的功能和目标——作为系统资源的管理者" class="headerlink" title="操作系统的功能和目标——作为系统资源的管理者"></a>操作系统的功能和目标——作为系统资源的管理者</h5><img src="\images\images\2020-05-19_224223.png" width="90%" height="90%" align="center/"><h5 id="操作系统的功能和目标——向上层提供方便易用的服务"><a href="#操作系统的功能和目标——向上层提供方便易用的服务" class="headerlink" title="操作系统的功能和目标——向上层提供方便易用的服务"></a>操作系统的功能和目标——向上层提供方便易用的服务</h5><p><strong>封装思想：</strong> 操作系统把一些 丑陋的硬件功能封装成简单 易用的服务，使用户能更方 便地使用计算机，用户无需 关心底层硬件的原理，只需 要对操作系统发出命令即可<br><img src="\images\images\2020-05-19_230531.png" width="90%" height="90%" align="center/"><br><img src="\images\images\2020-05-19_230549.png" width="90%" height="90%" align="center/"><br><img src="\images\images\2020-05-19_230610.png" width="90%" height="90%" align="center/"><br><img src="\images\images\2020-05-19_230635.png" width="90%" height="90%" align="center/"></p><h5 id="操作系统的功能和目标——作为最接近硬件的层次"><a href="#操作系统的功能和目标——作为最接近硬件的层次" class="headerlink" title="操作系统的功能和目标——作为最接近硬件的层次"></a>操作系统的功能和目标——作为最接近硬件的层次</h5><img src="\images\images\2020-05-19_230940.png" width="90%" height="90%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统_(一)操作系统的基本概念_02</title>
    <url>/posts/53474.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">计算机系统概述(2)</span><div class="note info"><p><strong>内容</strong><br>2.操作系统的四个特征</p></div><a id="more"></a><h2 id="操作系统的四个特征"><a href="#操作系统的四个特征" class="headerlink" title="操作系统的四个特征"></a>操作系统的四个特征</h2><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><img src="\images\images\2020-05-23_234212.png" width="100%" height="100%" align="center/"><h4 id="1-并发"><a href="#1-并发" class="headerlink" title="1.并发"></a>1.并发</h4><img src="\images\images\2020-05-23_234442.png" width="90%" height="90%" align="center/"> <img src="\images\images\2020-05-23_234540.png" width="90%" height="90%" align="center/"><h4 id="2-共享"><a href="#2-共享" class="headerlink" title="2.共享"></a>2.共享</h4><img src="\images\images\2020-05-23_234902.png" width="90%" height="90%" align="center/"><h4 id="并发与共享的关系"><a href="#并发与共享的关系" class="headerlink" title="并发与共享的关系"></a>并发与共享的关系</h4><img src="\images\images\2020-05-23_235027.png" width="90%" height="90%" align="center/"><h4 id="3-虚拟"><a href="#3-虚拟" class="headerlink" title="3.虚拟"></a>3.虚拟</h4><img src="\images\images\2020-05-23_235312.png" width="90%" height="90%" align="center/"><h4 id="4-异步"><a href="#4-异步" class="headerlink" title="4.异步"></a>4.异步</h4><img src="\images\images\2020-05-23_235348.png" width="90%" height="90%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统_(一)操作系统的发展与分类_03</title>
    <url>/posts/56425.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">计算机系统概述（3）</span><div class="note info"><p><strong>内容</strong><br>OS的发展与分类<br><strong>学习提示：</strong>要重点关注和理解各类操作系统主要想解决的是什么问题，各自的优缺点</p></div><a id="more"></a><h2 id="OS发展与分类"><a href="#OS发展与分类" class="headerlink" title="OS发展与分类"></a>OS发展与分类</h2><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><img src="\images\images\2020-05-24_001226.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-24_001336.png" width="90%" height="90%" align="center/"> <img src="\images\images\2020-05-24_001354.png" width="90%" height="90%" align="center/"> <img src="\images\images\2020-05-24_001416.png" width="100%" height="100%" align="center/"> <img src="\images\images\2020-05-24_001439.png" width="90%" height="90%" align="center/"> <img src="\images\images\2020-05-24_001500.png" width="90%" height="90%" align="center/"> <img src="\images\images\2020-05-24_001525.png" width="90%" height="90%" align="center/"> <img src="\images\images\2020-05-24_001539.png" width="90%" height="90%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_(二)线性表的定义和基本操作_03</title>
    <url>/posts/53249.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">线性表（1）</span><div class="note warning"><p><strong>内容目录</strong><br>2.1.1 线性表的定义<br>2.1.2 线性表的基本操作</p></div><a id="more"></a><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><img src="\images\images\2020-05-25_115258.png" width="85%" height="85%" align="center/"><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p><strong>为什么要实现对数据结构的基本操作？</strong></p><p>①团队合作编程，你定义的数据结构要让别人能够很方便的使用（封装）<br>②将常用的操作/运算封装成函数，避免重复工作，降低出错风险</p><img src="\images\images\2020-05-25_115433.png" width="85%" height="85%" align="center/"><h3 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h3><img src="\images\images\2020-05-25_115550.png" width="85%" height="85%" align="center/"><h4 id="“-amp-”解释的具体案例"><a href="#“-amp-”解释的具体案例" class="headerlink" title="“&amp;”解释的具体案例"></a><strong>“&amp;”</strong>解释的具体案例</h4><img src="\images\images\2020-05-25_122011.png" width="85%" height="85%" align="center/"> <img src="\images\images\2020-05-25_122027.png" width="85%" height="85%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_(一)数据结构的基本概念_01</title>
    <url>/posts/34586.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">绪论（1）</span><div class="note warning"><p>数据结构这门课着重关注的是数据元素之间的关系，和对这些数据元素的操作，而不关心具体的数据项内容。</p></div><a id="more"></a> <img src="\images\images\2020-05-18_143034.png" width="85%" height="85%" align="center/"> <img src="\images\images\2020-05-18_143102.png" width="85%" height="85%" align="center/"><div class="note warning"><p>在探讨一种数据结构时：<br>①定义逻辑结构（数据元素之间的关系）</p><p>②定义数据的运算（针对现实需求，应该对这种逻辑结构进行什么样的运算）</p><p>③确定某种存储结构，实现数据结构，并实现一些对数据结构的基本运算</p></div><img src="\images\images\2020-05-18_143120.png" width="85%" height="85%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构_(一)算法和算法评价_02</title>
    <url>/posts/53124.html</url>
    <content><![CDATA[<!-- build time:Sat May 30 2020 23:32:56 GMT+0800 (GMT+08:00) --><span class="label danger">绪论（2）</span><div class="note warning"><p><strong>内容目录</strong><br>1.2.1 算法的基本概念<br>1.2.2 算法效率的度量 <strong>（时间、空间复杂度）</strong></p></div><a id="more"></a><h2 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h2><h4 id="小结1"><a href="#小结1" class="headerlink" title="小结1"></a>小结1</h4><img src="\images\images\2020-05-20_152208.png" width="85%" height="85%" align="center/"><h2 id="算法效率的度量——时间复杂度"><a href="#算法效率的度量——时间复杂度" class="headerlink" title="算法效率的度量——时间复杂度"></a>算法效率的度量——时间复杂度</h2><h4 id="小结2"><a href="#小结2" class="headerlink" title="小结2"></a>小结2</h4><img src="\images\images\2020-05-20_152538.png" width="85%" height="85%" align="center/"><h4 id="算法1"><a href="#算法1" class="headerlink" title="算法1"></a>算法1</h4><img src="\images\images\2020-05-20_153341.png" width="85%" height="85%" align="center/"><h4 id="算法2"><a href="#算法2" class="headerlink" title="算法2"></a>算法2</h4><img src="\images\images\2020-05-20_153359.png" width="85%" height="85%" align="center/"><h4 id="算法3"><a href="#算法3" class="headerlink" title="算法3"></a>算法3</h4><img src="\images\images\2020-05-20_153411.png" width="85%" height="85%" align="center/"><h4 id="算法4"><a href="#算法4" class="headerlink" title="算法4"></a>算法4</h4><img src="\images\images\2020-05-20_153429.png" width="85%" height="85%" align="center/"><h2 id="算法效率的度量——空间复杂度"><a href="#算法效率的度量——空间复杂度" class="headerlink" title="算法效率的度量——空间复杂度"></a>算法效率的度量——空间复杂度</h2><h4 id="小结3"><a href="#小结3" class="headerlink" title="小结3"></a>小结3</h4><img src="\images\images\2020-05-20_192032.png" width="85%" height="85%" align="center/"><h4 id="算法1-1"><a href="#算法1-1" class="headerlink" title="算法1"></a>算法1</h4><img src="\images\images\2020-05-20_192334.png" width="85%" height="85%" align="center/"><h4 id="算法2-1"><a href="#算法2-1" class="headerlink" title="算法2"></a>算法2</h4><img src="\images\images\2020-05-20_192349.png" width="85%" height="85%" align="center/"><h4 id="算法3-1"><a href="#算法3-1" class="headerlink" title="算法3"></a>算法3</h4><img src="\images\images\2020-05-20_192401.png" width="85%" height="85%" align="center/"><h4 id="算法4-1"><a href="#算法4-1" class="headerlink" title="算法4"></a>算法4</h4><img src="\images\images\2020-05-20_192414.png" width="85%" height="85%" align="center/"><h4 id="算法5-递归"><a href="#算法5-递归" class="headerlink" title="算法5 递归"></a>算法5 递归</h4><img src="\images\images\2020-05-20_192450.png" width="85%" height="85%" align="center/"><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
